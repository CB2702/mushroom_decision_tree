name: Model Training and Evaluation Report

on:
  pull_request:
    branches:
      - master # Trigger on pull requests to the master branch

permissions:
  contents: write # Required for CML to upload plots/artifacts
  pull-requests: write # Required for CML to comment on pull requests
  # statuses: write # Optional: if you want CML to update commit statuses

jobs:
  train_and_report_eval_performance:
    runs-on: ubuntu-latest # Use the latest Ubuntu runner

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3 # Checkout your repository code

      - name: Setup Python 3.9
        uses: actions/setup-python@v4
        with:
          python-version: '3.9' # Specify Python version

      - name: Install Python Dependencies
        run: |
          python -m pip install --upgrade pip
          # Assuming you have a requirements.txt file in your repository root
          pip install -r requirements.txt
          # Add any other specific installations if needed, e.g., for ML libraries
          # pip install scikit-learn pandas matplotlib dvc dvc-data

      - name: Setup CML
        uses: iterative/setup-cml@v1 # Use the official CML setup action

      - name: Train Model and Generate Reports
        run: |
          # Ensure your orchestrator_train.py script is located correctly
          # For example, if it's in a directory named 'orchestrator' at the root of your repo:
          python orchestrator/orchestrator_train.py

          # Your Python script (orchestrator_train.py) should ideally:
          # 1. Train the model
          # 2. Save evaluation metrics (e.g., confusion matrix, feature importance) to JSON/CSV
          # 3. Generate plots (e.g., confusion matrix plot) and save them as images (PNG/SVG)

          # Example: Assuming your script outputs these files in the current directory
          # conf_matrix_train_dt_v2.json
          # feature_importance_dt_v2.json
          # confusion_matrix_plot.png # <-- This is a new assumed output file

      - name: Create CML Report
        env:
          # Use the default GITHUB_TOKEN for CML comments, which is automatically provided
          # and has necessary permissions for PR comments.
          # If MUSHROOM_TREE_TOKEN is required for other reasons (e.g., pushing to a different repo), keep it.
          REPO_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Start building the Markdown report
          echo "## Model Evaluation Report" > model_eval_report.md
          echo "" >> model_eval_report.md # Add a newline for spacing

          echo "### Training Metrics (Confusion Matrix)" >> model_eval_report.md
          # Format the JSON output nicely for the Markdown report
          # You might want to use 'jq' for better JSON formatting, or have your Python script
          # output the JSON as a formatted Markdown table/block directly.
          echo '```json' >> model_eval_report.md
          cat results/conf_matrix_train_dt_v2.json >> model_eval_report.md
          echo '```' >> model_eval_report.md
          echo "" >> model_eval_report.md

          echo "### Feature Importance" >> model_eval_report.md
          echo '```json' >> model_eval_report.md
          cat results/feature_importance_dt_v2.json >> model_eval_report.md
          echo '```' >> model_eval_report.md
          echo "" >> model_eval_report.md

          # Embed the confusion matrix plot
          # Ensure 'confusion_matrix_plot.png' is generated by your Python script
          if [ -f confusion_matrix_plot.png ]; then
            echo "### Confusion Matrix Plot" >> model_eval_report.md
            cml-publish confusion_matrix_plot.png --md >> model_eval_report.md
            echo "" >> model_eval_report.md
          else
            echo "Warning: Confusion matrix plot (confusion_matrix_plot.png) not found." >> model_eval_report.md
          fi

          # Create a comment on the Pull Request with the generated report
          cml comment create model_eval_report.md